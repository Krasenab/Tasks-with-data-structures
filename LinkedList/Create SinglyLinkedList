using System;
public class Program 
{
  static void Main() 
  {
     SinglyLinkedList sLL = new SinglyLinkedList();
     sLL.AddFirst(11);//2
     sLL.AddFirst(12); // 1
     sLL.AddLast(14); //3
     
     sLL.PrintList();
     sLL.RemoveFirst();
     sLL.PrintList();

     int coutnOfSinglyLinkedList = sLL.Count();
     Console.WriteLine(coutnOfSinglyLinkedList);
     
  }
}
public class Node{
    
    public Node Next;
    public int Data;
    
    public Node(int Data)
    {
        this.Data = Data;
        this.Next = null;
    }
    
    
}
public class SinglyLinkedList
{
    private Node head;
    public SinglyLinkedList()
    {
        this.head = null;
    }
    
    
    public void AddFirst(int data)
    {
      Node newNode = new Node(data);
      newNode.Next = head;
      head = newNode;
    }
    public void AddLast(int data)
    {
       Node newNode = new Node(data);
       if(head ==null)
      {
         head = newNode;
      }
      else{
         Node current = head;
        while(current.Next !=null)
        {
            current = current.Next;
        }
         current.Next = newNode;
      }
    }
    public void RemoveFirst()
    {
        if(head != null)
        {
          head = head.Next;
           
        }
       
    }
    public void RemoveLast()
    {
        if(head == null)
        {
            return;
        }
        else
        {
            if(head.Next ==null)
            {
                head = null;
                return;
            }
            else{
                
                Node current = head;
               while(current.Next.Next!=null)
               {
                    current = current.Next;
               }
                
              current.Next = null;
            }
                
        }
    }
    public int Count()
    {
        if(head==null)
        {
            return 0;
        }
        else
        {
            Node copiedHead = head;
            int count = 1;
            while(copiedHead.Next !=null)
            {
                copiedHead = copiedHead.Next;
                count++;
            }
            
        }
        return count;
    }
    public void PrintList()
    {
        Node current = head;
        while (current != null)
        {
            Console.Write(current.Data + " ");
            current = current.Next;
        }
        Console.WriteLine("null");
    }
}
